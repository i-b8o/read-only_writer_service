// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WritableRegulationGRPCClient is the client API for WritableRegulationGRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WritableRegulationGRPCClient interface {
	CreateRegulation(ctx context.Context, in *Regulation, opts ...grpc.CallOption) (*ID, error)
	DeleteRegulation(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Status, error)
	CreateChapter(ctx context.Context, in *Chapter, opts ...grpc.CallOption) (*ID, error)
	DeleteChaptersForRegulation(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Status, error)
	CreateAllParagraphs(ctx context.Context, in *Paragraphs, opts ...grpc.CallOption) (*Status, error)
	UpdateOneParagraph(ctx context.Context, in *UpdateOneRequestMesssage, opts ...grpc.CallOption) (*Status, error)
	DeleteParagraphsForChapter(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Status, error)
}

type writableRegulationGRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewWritableRegulationGRPCClient(cc grpc.ClientConnInterface) WritableRegulationGRPCClient {
	return &writableRegulationGRPCClient{cc}
}

func (c *writableRegulationGRPCClient) CreateRegulation(ctx context.Context, in *Regulation, opts ...grpc.CallOption) (*ID, error) {
	out := new(ID)
	err := c.cc.Invoke(ctx, "/WritableRegulationGRPC/CreateRegulation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *writableRegulationGRPCClient) DeleteRegulation(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/WritableRegulationGRPC/DeleteRegulation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *writableRegulationGRPCClient) CreateChapter(ctx context.Context, in *Chapter, opts ...grpc.CallOption) (*ID, error) {
	out := new(ID)
	err := c.cc.Invoke(ctx, "/WritableRegulationGRPC/CreateChapter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *writableRegulationGRPCClient) DeleteChaptersForRegulation(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/WritableRegulationGRPC/DeleteChaptersForRegulation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *writableRegulationGRPCClient) CreateAllParagraphs(ctx context.Context, in *Paragraphs, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/WritableRegulationGRPC/CreateAllParagraphs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *writableRegulationGRPCClient) UpdateOneParagraph(ctx context.Context, in *UpdateOneRequestMesssage, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/WritableRegulationGRPC/UpdateOneParagraph", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *writableRegulationGRPCClient) DeleteParagraphsForChapter(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/WritableRegulationGRPC/DeleteParagraphsForChapter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WritableRegulationGRPCServer is the server API for WritableRegulationGRPC service.
// All implementations must embed UnimplementedWritableRegulationGRPCServer
// for forward compatibility
type WritableRegulationGRPCServer interface {
	CreateRegulation(context.Context, *Regulation) (*ID, error)
	DeleteRegulation(context.Context, *ID) (*Status, error)
	CreateChapter(context.Context, *Chapter) (*ID, error)
	DeleteChaptersForRegulation(context.Context, *ID) (*Status, error)
	CreateAllParagraphs(context.Context, *Paragraphs) (*Status, error)
	UpdateOneParagraph(context.Context, *UpdateOneRequestMesssage) (*Status, error)
	DeleteParagraphsForChapter(context.Context, *ID) (*Status, error)
	mustEmbedUnimplementedWritableRegulationGRPCServer()
}

// UnimplementedWritableRegulationGRPCServer must be embedded to have forward compatible implementations.
type UnimplementedWritableRegulationGRPCServer struct {
}

func (UnimplementedWritableRegulationGRPCServer) CreateRegulation(context.Context, *Regulation) (*ID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRegulation not implemented")
}
func (UnimplementedWritableRegulationGRPCServer) DeleteRegulation(context.Context, *ID) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRegulation not implemented")
}
func (UnimplementedWritableRegulationGRPCServer) CreateChapter(context.Context, *Chapter) (*ID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateChapter not implemented")
}
func (UnimplementedWritableRegulationGRPCServer) DeleteChaptersForRegulation(context.Context, *ID) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteChaptersForRegulation not implemented")
}
func (UnimplementedWritableRegulationGRPCServer) CreateAllParagraphs(context.Context, *Paragraphs) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAllParagraphs not implemented")
}
func (UnimplementedWritableRegulationGRPCServer) UpdateOneParagraph(context.Context, *UpdateOneRequestMesssage) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOneParagraph not implemented")
}
func (UnimplementedWritableRegulationGRPCServer) DeleteParagraphsForChapter(context.Context, *ID) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteParagraphsForChapter not implemented")
}
func (UnimplementedWritableRegulationGRPCServer) mustEmbedUnimplementedWritableRegulationGRPCServer() {
}

// UnsafeWritableRegulationGRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WritableRegulationGRPCServer will
// result in compilation errors.
type UnsafeWritableRegulationGRPCServer interface {
	mustEmbedUnimplementedWritableRegulationGRPCServer()
}

func RegisterWritableRegulationGRPCServer(s grpc.ServiceRegistrar, srv WritableRegulationGRPCServer) {
	s.RegisterService(&WritableRegulationGRPC_ServiceDesc, srv)
}

func _WritableRegulationGRPC_CreateRegulation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Regulation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WritableRegulationGRPCServer).CreateRegulation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WritableRegulationGRPC/CreateRegulation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WritableRegulationGRPCServer).CreateRegulation(ctx, req.(*Regulation))
	}
	return interceptor(ctx, in, info, handler)
}

func _WritableRegulationGRPC_DeleteRegulation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WritableRegulationGRPCServer).DeleteRegulation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WritableRegulationGRPC/DeleteRegulation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WritableRegulationGRPCServer).DeleteRegulation(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _WritableRegulationGRPC_CreateChapter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Chapter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WritableRegulationGRPCServer).CreateChapter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WritableRegulationGRPC/CreateChapter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WritableRegulationGRPCServer).CreateChapter(ctx, req.(*Chapter))
	}
	return interceptor(ctx, in, info, handler)
}

func _WritableRegulationGRPC_DeleteChaptersForRegulation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WritableRegulationGRPCServer).DeleteChaptersForRegulation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WritableRegulationGRPC/DeleteChaptersForRegulation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WritableRegulationGRPCServer).DeleteChaptersForRegulation(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _WritableRegulationGRPC_CreateAllParagraphs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Paragraphs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WritableRegulationGRPCServer).CreateAllParagraphs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WritableRegulationGRPC/CreateAllParagraphs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WritableRegulationGRPCServer).CreateAllParagraphs(ctx, req.(*Paragraphs))
	}
	return interceptor(ctx, in, info, handler)
}

func _WritableRegulationGRPC_UpdateOneParagraph_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOneRequestMesssage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WritableRegulationGRPCServer).UpdateOneParagraph(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WritableRegulationGRPC/UpdateOneParagraph",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WritableRegulationGRPCServer).UpdateOneParagraph(ctx, req.(*UpdateOneRequestMesssage))
	}
	return interceptor(ctx, in, info, handler)
}

func _WritableRegulationGRPC_DeleteParagraphsForChapter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WritableRegulationGRPCServer).DeleteParagraphsForChapter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WritableRegulationGRPC/DeleteParagraphsForChapter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WritableRegulationGRPCServer).DeleteParagraphsForChapter(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

// WritableRegulationGRPC_ServiceDesc is the grpc.ServiceDesc for WritableRegulationGRPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WritableRegulationGRPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "WritableRegulationGRPC",
	HandlerType: (*WritableRegulationGRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRegulation",
			Handler:    _WritableRegulationGRPC_CreateRegulation_Handler,
		},
		{
			MethodName: "DeleteRegulation",
			Handler:    _WritableRegulationGRPC_DeleteRegulation_Handler,
		},
		{
			MethodName: "CreateChapter",
			Handler:    _WritableRegulationGRPC_CreateChapter_Handler,
		},
		{
			MethodName: "DeleteChaptersForRegulation",
			Handler:    _WritableRegulationGRPC_DeleteChaptersForRegulation_Handler,
		},
		{
			MethodName: "CreateAllParagraphs",
			Handler:    _WritableRegulationGRPC_CreateAllParagraphs_Handler,
		},
		{
			MethodName: "UpdateOneParagraph",
			Handler:    _WritableRegulationGRPC_UpdateOneParagraph_Handler,
		},
		{
			MethodName: "DeleteParagraphsForChapter",
			Handler:    _WritableRegulationGRPC_DeleteParagraphsForChapter_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
